[Vertex shader]

#version 150

#include triplanar_vs.inl

[Fragment shader]
#version 150

in vec2 texCoord0;
in vec2 texCoord1;

uniform sampler2DArray baseTex;
uniform sampler2DArray sideTex;
uniform sampler2D alphaTex;
uniform sampler2D specularTex;

uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec3 norm;
uniform vec3 lightVec;

in vec4 pixelPos;
in vec4 vAdjustPosition;
in vec4 vLocalPosition;

uniform float specPower;
uniform float specIntensity;

uniform vec4 lightColor;
uniform vec4 lightAmbient;

#include shadow_frag_terrain.inl
#include deferred.inl
#include piecewiseblend.inl

void main()
{	
	WriteOutPositionAndNormals();
	vec3 normal = normalize(norm);
	float scale = 0.019;
   
	vec4 vAdjustedPosition = vAdjustPosition * scale;
	vec4 vAdjustedPosition23 = vAdjustedPosition;
	vec4 vAdjustedPosition14 = vAdjustedPosition * 0.25;

	float tighten = 0.4679; 
	
	vec3 blendweights = abs(normal) - tighten;
	blendweights = max(blendweights, 0);
   
	float mXY = blendweights.z;
	float mXZ = blendweights.y; 
	float mYZ = blendweights.x; 
   
	float total = 1.0 / (mXY + mXZ + mYZ);
	mXZ *= total;
	
	float sideTotal = 1.0 / max((mXY + mYZ), 0.0001);
	mXY *= sideTotal;
	mYZ *= sideTotal;
   
   // need scale to be such that 8 units over is one texture
	
	vec4 cXZ = texture(baseTex, vec3(vAdjustedPosition.x, vAdjustedPosition.z , 0.0));
	vec4 cXY = texture(baseTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 1.0));
	vec4 cYZ = texture(baseTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 1.0));
	
	vec4 blendTexel = texture(alphaTex, vec2(texCoord1));	
	vec4 blendTexel2 = texture(specularTex, vec2(texCoord1));	
	if (blendTexel.g > 0)
	{
		vec4 cXZ1 = texture(baseTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 2.0));
		vec4 cXY1 = texture(baseTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 3.0));
		vec4 cYZ1 = texture(baseTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 3.0));	
		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel.g);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel.g);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel.g);
	}

	if (blendTexel.b > 0)
	{
		vec4 cXZ1 = texture(baseTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 4.0));
		vec4 cXY1 = texture(baseTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 5.0));
		vec4 cYZ1 = texture(baseTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 5.0));
		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel.b);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel.b);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel.b);
	}

	if (blendTexel.a > 0)
	{	
		vec4 cXZ1 = texture(baseTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 4.0));
		vec4 cXY1 = texture(baseTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 7.0));
		vec4 cYZ1 = texture(baseTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 7.0));

		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel.a);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel.a);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel.a);
	}	
	
	if (blendTexel2.r > 0)
	{
		vec4 cXZ1 = texture(sideTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 0.0));
		vec4 cXY1 = texture(sideTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 1.0));
		vec4 cYZ1 = texture(sideTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 1.0));	
		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel2.r);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel2.r);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel2.r);
	}


	if (blendTexel2.g > 0)
	{
		vec4 cXZ1 = texture(sideTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 2.0));
		vec4 cXY1 = texture(sideTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 3.0));
		vec4 cYZ1 = texture(sideTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 3.0));	
		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel2.g);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel2.g);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel2.g);
	}

	if (blendTexel2.b > 0)
	{
		vec4 cXZ1 = texture(sideTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 4.0));
		vec4 cXY1 = texture(sideTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 5.0));
		vec4 cYZ1 = texture(sideTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 5.0));
		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel2.b);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel2.b);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel2.b);
	}

	if (blendTexel2.a > 0)
	{	
		vec4 cXZ1 = texture(sideTex, vec3(vAdjustedPosition.x , vAdjustedPosition.z , 4.0)); 
		vec4 cXY1 = texture(sideTex, vec3(vAdjustedPosition23.x, vAdjustedPosition23.y, 7.0));
		vec4 cYZ1 = texture(sideTex, vec3(vAdjustedPosition23.z, vAdjustedPosition23.y, 7.0));

		cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel2.a);
		cXY = piecewiseBlend(cXY1, cXY, blendTexel2.a);
		cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel2.a);
	}

	vec4 baseTexel = piecewiseBlend(cXZ, cXY * mXY + cYZ * mYZ, mXZ);
	
	// smoothen the result a bit, to avoid aliasing at shadow contact point
	// FIXME: Divide by W?

	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);	
	
	normalBuffer.w = PCFShadowMap(lightCoords);
	
	albedoBuffer = getGrid(baseTexel, vAdjustPosition.xyz, norm);
	albedoBuffer.w = 0.0;
	glowBuffer.xyzw = vec4(0.0, 0.0, 0.0, 1.0);	
	specInteriorBuffer = vec4(0.0, 0.0, 0.0, 1.0);
}
