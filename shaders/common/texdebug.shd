[Vertex shader]
#version 150
#pragma STDGL invariant(all)

flat out vec4 face;
flat out float fR;
out vec3 barycentric;

void main()
{
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	barycentric = gl_MultiTexCoord1.xyz;

	// Lighting vectors
		
	face = gl_Color;
	fR = 8.0;	
}

[Fragment shader]
#version 150
#pragma STDGL invariant(all)

#define saturate(x) clamp(x,0.0,1.0)

flat in vec4 face;
flat in float fR;
in vec3 barycentric;

#extension GL_ARB_draw_buffers : enable

uniform float texScale;
uniform float mipBias;

void main()
{
	vec3 dx = dFdx(barycentric * texScale);
	vec3 dy = dFdy(barycentric * texScale);
	
	float d = max(dot(dx, dx), dot(dy, dy));	
	float mip = 1.0 - saturate(0.5 * log2((d)) + mipBias);
	float mipLevel = ceil(fR * (1.0 - mip));
	
	if (mipLevel < 1)
	{
		gl_FragData[0] = vec4(0.5,0.5,0.5,0);
	}
	else if (mipLevel < 2)
	{
		gl_FragData[0] = vec4(1,0,0,0);
	}
	else if (mipLevel < 3)
	{
		gl_FragData[0] = vec4(0,1,0,0);
	}
	else if (mipLevel < 4)
	{
		gl_FragData[0] = vec4(0,0,1,0);
	}
	else if (mipLevel < 5)
	{
		gl_FragData[0] = vec4(0,1,1,0);
	}
	else if (mipLevel < 6)
	{
		gl_FragData[0] = vec4(1,1,0,0);
	}
	else if (mipLevel < 7)
	{
		gl_FragData[0] = vec4(1,0,1,0);
	}
	else
	{
		gl_FragData[0] = vec4(1,1,1,0);
	}
	

}
