[Vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require

layout (location=1) in vec3 position;
layout (location=2) in vec2 texCoord;

out vec4 outPosition;
out vec2 texCoord0;

void main()
{

	gl_Position = vec4(position.xyz,1);
	outPosition = gl_Position;
	texCoord0 = texCoord;
}

[Fragment shader]

#version 150
#extension GL_ARB_explicit_attrib_location: require

layout (location = 0) out vec4 finalColor;

uniform mat4 projectionMatrixInverse;
uniform mat4 modelviewMatrixInverse;
uniform mat4 modelViewMatrix;

uniform sampler2D diffuseTex;
uniform sampler2D normalsTex;
uniform sampler2D pixelPosTex;
uniform sampler2D aoTex;
uniform sampler2D unlitTex;
uniform sampler2D waterRippleTex;
uniform sampler2D fogOfWarAndWaterColors;
uniform sampler2D fogMap;

uniform float timer;
float baseWaterHeight = 20.0;
uniform vec2 worldDimensions;
uniform vec3 viewerPos;
uniform float screenWidth;
uniform float screenHeight;
uniform vec4 lightColor;
uniform vec4 lightAmbient;
uniform mat4 invProjectionMatrix;

in vec2 texCoord0;
 float totStrength = 1.38;
 float strength = 0.07;
 float offset = 18.0;
 float falloff = 0.000002;
 float rad = 0.006;


#define SAMPLES 16 // 10 is good
#define saturate(x) clamp(x,0.0,1.0)

const float invSamples = 1.0/16.0;

void main(void)
{
	float hp = 1.0 / screenWidth;
	float vp = 1.0 / screenHeight;

	float waterHeight = baseWaterHeight + sin(timer);

	vec4 normalsSample00 = texture(diffuseTex,texCoord0 + vec2(-hp, vp));
	vec4 normalsSample01 = texture(diffuseTex,texCoord0 + vec2(0,vp));
	vec4 normalsSample02 = texture(diffuseTex,texCoord0 + vec2(hp,vp));
	vec4 normalsSample10 = texture(diffuseTex,texCoord0 + vec2(-hp, 0));
	vec4 normalsSample12 = texture(diffuseTex,texCoord0 + vec2(hp, 0));
	vec4 normalsSample20 = texture(diffuseTex,texCoord0 + vec2(-hp, -vp));
	vec4 normalsSample21 = texture(diffuseTex,texCoord0 + vec2(0,-vp));
	vec4 normalsSample22 = texture(diffuseTex,texCoord0 + vec2(hp,-vp));

// tangent, binormal, normal
// tangent is x, binormal is z, normal is y

	vec4 normalsSample = texture(normalsTex,texCoord0);

	float sobel = abs(normalsSample00 + 2.0 * normalsSample01 + normalsSample02 -(normalsSample20 + 2.0 * normalsSample21 + normalsSample22)).w + 
	 abs(normalsSample00 + 2.0 * normalsSample10 + normalsSample20 -(normalsSample02 + 2.0 * normalsSample12 + normalsSample22)).w;

	vec4 pixelPosSample = texture(pixelPosTex,texCoord0);
	pixelPosSample.b = pixelPosSample.r;
	pixelPosSample.r = gl_FragCoord.x / screenWidth;
	pixelPosSample.g = gl_FragCoord.y / screenHeight;
	vec4 pixelPos = pixelPosSample;	

	pixelPos *= 2.0;
	pixelPos -= 1.0;
	pixelPos.w = 1.0;

	vec4 viewSpacePos = projectionMatrixInverse * pixelPos;
	viewSpacePos.xyz /= viewSpacePos.w;
	viewSpacePos.w = 1.0;

	vec4 worldSpacePos = (modelviewMatrixInverse * viewSpacePos);
		
	vec2 fogOfWarLookUp = (worldSpacePos.xz / worldDimensions / 8.0) + vec2(0.5, 0.5);		
	vec4 fogOfWarSample = texture(fogOfWarAndWaterColors, fogOfWarLookUp);
	vec4 fogSample = texture(fogMap, fogOfWarLookUp);

	if (fogOfWarSample.a < 0.01)
	{
		finalColor = vec4(0,0,0,0);
		return;
	}

	// Water computation

	vec3 eyeVec = worldSpacePos.xyz - viewerPos.xyz;	
	vec3 eyeVecNorm = normalize(eyeVec);

	float t = (waterHeight - viewerPos.y) / eyeVecNorm.y;
	vec3 waterSurfacePoint = viewerPos + eyeVecNorm * t;


	vec4 offsetTex = texture(waterRippleTex, (waterSurfacePoint.xz * 0.0625) + vec2(timer*0.125,0)) * 2.0 - 1.0; // in tangent space
	vec4 offsetTex2 = texture(waterRippleTex, (waterSurfacePoint.xz * 0.125) + vec2(0,-timer*0.125)) * 2.0 - 1.0; // in tangent space
	vec4 offsetTex3 = texture(waterRippleTex, (waterSurfacePoint.xz * 0.0625) + vec2(-timer*0.125,0)) * 2.0 - 1.0; // in tangent space
	vec4 offsetTex4 = texture(waterRippleTex, (waterSurfacePoint.xz * 0.03125) + vec2(0,timer*0.125)) * 2.0 - 1.0; // in tangent space

	vec3 worldSpaceOffsetTex = mat3(modelViewMatrix) * normalize(offsetTex.xzy + offsetTex2.xzy + offsetTex3.xzy + offsetTex4.xzy);		// NOTE SWIZZLE
	vec3 eye = (mat3(modelViewMatrix) * vec3(0,0,1)).xyz;
	vec3 light = (mat3(modelViewMatrix) * normalize(vec3(1,1,1))).xyz;
	vec3 waterNormal = (mat3(modelViewMatrix) * vec3(0,1,0)).xyz;

	eye = normalize(eye);
	light = normalize(light);
	
	float waterDistance = (waterHeight - worldSpacePos.y); //water height for shader only
	
	vec3 displacement = worldSpaceOffsetTex.xzy * 0.01 * clamp(waterDistance, 0.0, 1.0);
	vec2 texelToSample = texCoord0;
	if (waterDistance > 0.1)
	{
		texelToSample += displacement.xz;
	}
	float viewDistance = saturate((30.0 - worldSpacePos.y) / 15.0);
	float fog = saturate(1.0 / pow(2.71828, viewDistance));

	float shoreLineFog = saturate(1.0 / pow(2.71828,waterDistance)	);
	float waterFog = saturate(1.0 / pow(2.71828, waterDistance/8.0));
	vec3 fogColor = vec3(0.0, 0.125, 0.0625);	
	
	vec4 unlitSample = texture(unlitTex,texelToSample);
	vec4 diffuseSample = texture(diffuseTex, texelToSample);
	vec4 reflectionSample = texture(unlitTex,texelToSample);

	vec4 preGammaColor = diffuseSample;
	if (waterDistance > 0.0)
	{
		preGammaColor.xyz = 
			(preGammaColor.xyz * (waterFog) + fogColor * (1.0-waterFog));
	}

	preGammaColor = preGammaColor * fogOfWarSample.a;
	
	if (waterDistance > 0.0)
	{
		float eyedot = dot(eye, worldSpaceOffsetTex);
		float spec = pow(saturate(dot(worldSpaceOffsetTex,light)),12.0);
		vec4 waterFogColor = vec4(fogOfWarSample.rgb, 1.0);
		reflectionSample = waterFogColor * 0.25;
		preGammaColor.xyz = (preGammaColor.xyz * eyedot + reflectionSample.xyz * (1.0 - eyedot) + spec) * (1.0 - shoreLineFog) + vec3(1,1,1) * (shoreLineFog);		
	}

	if (sobel > 0.0)
	{		
		preGammaColor = 0.5 * preGammaColor + 0.5 * vec4(1,1,1,1);
	}

	preGammaColor.xyz *= 1.35;  // Hardcoded Exposure Adjustment

	vec3 x = max(vec3(0,0,0),preGammaColor.xyz-vec3(0.004));
	vec3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
	finalColor.xyz = retColor;
	finalColor.w = 1.0;
}
