[Vertex shader]

#version 150

varying vec4 pixelPos;
varying vec3 norm;
varying vec3 vWorldPosition;

uniform mat4 worldMatrix;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;



void main()
{
    vec4 vertex = gl_Vertex;
	vertex.xyz += gl_Normal.xyz * 0.4;

	vWorldPosition = (worldMatrix * vertex).xyz;
	gl_Position = projectionMatrix * modelViewMatrix * vertex;
	pixelPos = gl_Position;

	// Lighting vectors
	
	norm = gl_Normal;
	
	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_TexCoord[1] = gl_MultiTexCoord1;
}

[Fragment shader]

#version 150

#extension GL_ARB_draw_buffers : enable

uniform sampler2D baseTex;

// uniform sampler2D shadowTex;
// uniform sampler2DShadow shadowTex;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

varying vec3 norm;
varying vec4 pixelPos;
varying vec3 vWorldPosition;

uniform float specPower;
uniform float specIntensity;

void main()
{
   const float antialias = 0.25;

   vec4 baseTexel = texture(baseTex, vec2(gl_TexCoord[0]));
   vec3 lightPos = vec3(-1.0,1.0,1.0);
   float intensity = saturate(0.5 + dot(normalize(norm), normalize(lightPos)));

   // do lighting
  
   // lightPos is in camera space
   // camPos is in object space
   
	vec4 trueNorm;
	trueNorm.xyz = normalize(norm);
	trueNorm.w = pixelPos.z / pixelPos.w;			// NDC cube from -1 ... 1
	trueNorm = trueNorm * 0.5 + 0.5;
   
/*   
	gl_FragData[0] = vec4(trueNorm.x, trueNorm.y, trueNorm.z, 1);
	gl_FragData[0] = vec4(trueNorm.x,trueNorm.y,trueNorm.z,trueNorm.w);
	gl_FragData[1] = vec4(specPower, specIntensity, 0, 0);

 */

   gl_FragData[0] = vec4(0,0,0,1.0);

}
