[Vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : enable

layout ( location = 1 ) in vec3 position;
layout ( location = 2 ) in vec2 texCoord;

out vec4 outPosition;
out vec2 uv;

void main()
{

	gl_Position = vec4(position.xyz,1);
	outPosition = gl_Position;
	
}

[Fragment shader]

#version 150

out vec4 fragColor;
uniform sampler2D srcTex;
uniform sampler2D depthTex;
uniform vec2 viewport;

float gauss( float a, float b )
{
	return pow(1.0 - abs(a-b),2);
}

void main(void)
{
  vec2 uv = vec2(gl_FragCoord.xy / viewport);
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.411764705882353) * vec2(0.0,1.0);
  vec2 off2 = vec2(3.2941176470588234) * vec2(0.0,1.0);
  vec2 off3 = vec2(5.176470588235294) * vec2(0.0,1.0);
  color += texture(srcTex, uv) * 0.3964825501511404; // 0.1964825501511404;
  color += texture(srcTex, uv + (off1 / viewport)) * 0.2969069646728344;
  color += texture(srcTex, uv - (off1 / viewport)) * 0.2969069646728344;
  color += texture(srcTex, uv + (off2 / viewport)) * 0.09447039785044732;
  color += texture(srcTex, uv - (off2 / viewport)) * 0.09447039785044732;
  color += texture(srcTex, uv + (off3 / viewport)) * 0.010381362401148057;
  color += texture(srcTex, uv - (off3 / viewport)) * 0.010381362401148057;  
  fragColor = color;
}
