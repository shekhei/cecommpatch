[Vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require

layout ( location = 1 ) in vec3 position;
layout ( location = 2 ) in vec2 texCoord;
layout ( location = 3 ) in vec3 normal;


out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;
out vec2 texCoord0;

uniform mat4 worldMatrix;
uniform mat4 normalMatrix;
uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;

void main()
{
	vWorldPosition = (modelViewMatrix * vec4(position.xyz, 1));
	gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1);
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = mat3(modelViewMatrix) * normal;
	
	texCoord0 = texCoord;
}

[Fragment shader]
#version 150

#extension GL_ARB_draw_buffers : enable

#include deferred.inl
#include shadow_frag.inl

in vec2 texCoord0;

uniform sampler2D baseTex;
uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec4 pixelPos;

uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;

#include interiors.inl

void main()
{	
	vec4 baseTexel = texture(baseTex, texCoord0);
	

	vec4 glowTexel = texture(glowTex, texCoord0);
	// and actually we just pack things in here.	

	if (baseTexel.w < 0.2) { discard; } 

	WriteOutPositionAndNormals();
	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);

	vec3 r = reflect(-lightVec, normalize(eyeNormal));
	
	float shadow = saturate(PCFShadowMap(lightCoords));
	normalBuffer.w = shadow;
	
	albedoBuffer = baseTexel;
	/*
		 * 
		saturate(
		saturate(dot(eyeNormal, lightVec)) 
		 * shadow * lightColor
		  + realLightAmbient);	  
		albedoBuffer.xyz += vec3(phong,phong,phong)*saturate(shadow+0.5);	
	 */

	albedoBuffer.xyz = blendColorDodge(albedoBuffer.xyz,tintValue.xyz, tintValue.w);
	albedoBuffer.w = outlineValue;

	glowBuffer.xyz = glowTexel.xyz;
	glowBuffer.w = 1.0;	
	specInteriorBuffer.x = specularPower;
	specInteriorBuffer.y = specularIntensity;
	specInteriorBuffer.z = GetInteriorSample();
	specInteriorBuffer.w = 1.0;

}
