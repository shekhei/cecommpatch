[Vertex shader]

#version 150

#include triplanar_vs.inl

[Fragment shader]
#version 150

uniform sampler2D baseTex;
uniform sampler2D sideTex;
uniform sampler2D alphaTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

out vec2 texCoord0;
out vec2 texCoord1;

in vec3 norm;
uniform vec3 lightVec;

in vec4 pixelPos;
in vec4 vAdjustPosition;
in vec4 vLocalPosition;

uniform float specPower;
uniform float specIntensity;

uniform vec4 lightColor;
uniform vec4 lightAmbient;

#include shadow_frag_terrain.inl
#include deferred.inl

vec4 piecewiseBlend(vec4 upperTex, vec4 lowerTex, float amount)
{
	const float blendRange = 0.1;
	vec4 baseTexel;
	
	amount *= 1.0 + blendRange;
	
	if (upperTex.a < amount - blendRange) 
	{
		baseTexel = upperTex;
	} 
	else if (upperTex.a > amount + blendRange) 
	{
		baseTexel = lowerTex;
	} 
	else 
	{
		float f = (upperTex.a - (amount - blendRange)) / (2.0 * blendRange);
		baseTexel = lerp(upperTex, lowerTex, f);	
	}	
	
	return baseTexel;
}

void main()
{	
	WriteOutPositionAndNormals();	
	vec3 normal = normalize(norm);
	float scale = 0.019;
   
	vec4 vAdjustedPosition = vAdjustPosition * scale;
	vec4 vAdjustedPosition23 = vAdjustedPosition;
	vec4 vAdjustedPosition14 = vAdjustedPosition * 0.25;


	float tighten = 0.4679; 
	
	vec3 blendweights = abs(normal) - tighten;
	blendweights = max(blendweights, 0);
   
	float mXY = blendweights.z;
	float mXZ = blendweights.y; 
	float mYZ = blendweights.x; 
   
	float total = 1.0 / (mXY + mXZ + mYZ);
	mXZ *= total;
	
	float sideTotal = 1.0 / max((mXY + mYZ), 0.0001);
	mXY *= sideTotal;
	mYZ *= sideTotal;
   
   // need scale to be such that 8 units over is one texture
	
	vec4 cXZ = 0.5 * texture(baseTex, vec2(vAdjustedPosition.x, vAdjustedPosition.z)) 
	+ 0.5 * texture(baseTex, vec2(vAdjustedPosition14.x , vAdjustedPosition14.z));   
	vec4 cXY = texture(sideTex, vec2(vAdjustedPosition23.x, vAdjustedPosition23.y));
	vec4 cYZ = texture(sideTex, vec2(vAdjustedPosition23.z, vAdjustedPosition23.y));
	vec4 baseTexel = piecewiseBlend(cXZ, cXY * mXY + cYZ * mYZ, mXZ);
	
	// smoothen the result a bit, to avoid aliasing at shadow contact point
	// FIXME: Divide by W?

	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);	
	float shadow = PCFShadowMap(lightCoords);
	normalBuffer.w = shadow;
	
	albedoBuffer = getGrid(baseTexel,vAdjustPosition.xyz,norm); // * light;	
	albedoBuffer.w = 0.0;
	glowBuffer.xyzw = vec4(0.0, 0.0, 0.0, 1.0);
	// I don't remember what goes into the other things.		
	specInteriorBuffer = vec4(0.0, 0.0, 0.0, 1.0);
}
