[Vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require

layout ( location = 1 ) in vec3 position;
layout ( location = 2 ) in vec2 texCoord;
layout ( location = 3 ) in vec3 normal;

out vec2 texCoord0;

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

uniform mat4 worldMatrix;
uniform mat4 normalMatrix;


void main()
{
	vWorldPosition = (modelViewMatrix * vec4(position.xyz, 1.0));
	gl_Position = (projectionMatrix * modelViewMatrix) * vec4(position.xyz, 1.0);
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = mat3(modelViewMatrix) * normal;
	
	texCoord0 = texCoord;
	
}

[Fragment shader]
#version 150
#extension GL_ARB_draw_buffers : enable

#include deferred.inl

#include shadow_frag.inl

uniform sampler2D baseTex;
uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform sampler2D alphaTex;

uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec4 pixelPos;
in vec2 texCoord0;

uniform float specularPower;
uniform float specularIntensity;
uniform float screenWidth;
uniform float screenHeight;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;


void main()
{	
	vec4 pixelPosSample = texture(alphaTex,vec2(gl_FragCoord.x / screenWidth, gl_FragCoord.y / screenHeight));
	if (gl_FragCoord.z > pixelPosSample.r)
	{
		discard;
	}

	vec4 baseTexel = texture(baseTex, texCoord0);
	vec4 glowTexel = texture(glowTex, texCoord0);
	// and actually we just pack things in here.	

//	if (baseTexel.w < 0.2) { discard; } 

	vec3 norm = normalize(eyeNormal);
	normalBuffer.xyz = norm;			// FIXME packing?	
	normalBuffer.w = 1.0 - (vWorldPosition.z / 1500.0);	

	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);
	vec3 r = reflect(-lightVec, normalize(eyeNormal));
	float phong = pow(saturate(r.z), specularPower) * glowTexel.a * specularIntensity;


	float lambertian = dot(eyeNormal,lightVec);
	float shadow = saturate(PCFShadowMap(lightCoords)) * step(0.02,lambertian);

	albedoBuffer = baseTexel;
	albedoBuffer.w = 0.0;


}
