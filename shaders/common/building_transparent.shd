[Vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require

layout ( location = 1 ) in vec3 position;
layout ( location = 2 ) in vec3 texCoord;
layout ( location = 3 ) in vec3 normal;

out vec3 texCoord0;

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;

uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

uniform mat4 worldMatrix;
uniform mat4 normalMatrix;


void main()
{
	vWorldPosition = (modelViewMatrix * vec4(position.xyz, 1.0));
	gl_Position = (projectionMatrix * modelViewMatrix) * vec4(position.xyz, 1.0);
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = mat3(modelViewMatrix) * normal;
	
	texCoord0 = texCoord;
	
}

[Fragment shader]
#version 150
#extension GL_ARB_draw_buffers : enable

#include deferred.inl

#include shadow_frag.inl

uniform sampler2D baseTex;
uniform sampler2D alphaTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec4 pixelPos;
in vec3 texCoord0;

uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;
uniform float screenWidth;
uniform float screenHeight;

out vec4 fragColor;

void main()
{	
	vec4 baseTexel = texture(baseTex, vec2(texCoord0.x, -texCoord0.y) / texCoord0.z);	
	if (baseTexel.a < 0.25) { discard; }
	vec2 depthPos = vec2(gl_FragCoord.x / screenWidth, gl_FragCoord.y / screenHeight);
	vec4 depth = texture (alphaTex, depthPos);
	fragColor = baseTexel;
	fragColor.a = fragColor.a * (gl_FragCoord.z < depth.r ? 0.2 : 0.0);
}

