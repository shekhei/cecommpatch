[Vertex shader]
#version 150

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;
out vec4 vViewPosition;
out vec2 texCoord0;
out vec2 texCoord1;

in ivec2 textureArray;
flat out int textureArrayIndex;
flat out int textureArrayPage;

in mat4 worldMatrix;
//uniform mat4 worldMatrix;

uniform mat4 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

void main()
{
	vWorldPosition = (worldMatrix * gl_Vertex);
	vViewPosition = modelViewMatrix * vWorldPosition;
	gl_Position = projectionMatrix * vViewPosition;
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = mat3(modelViewMatrix * worldMatrix) * gl_Normal;
	
	texCoord0 = gl_MultiTexCoord0.xy;
	texCoord1 = gl_MultiTexCoord1.xy;
	textureArrayPage = textureArray.x;
	textureArrayIndex = textureArray.y;
}

[Fragment shader]
#version 150

#extension GL_ARB_draw_buffers : enable
#extension GL_EXT_texture_array : enable

#include shadow_frag.inl

uniform sampler2DArray baseTex[8];

uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

varying vec3 eyeNormal;
varying vec4 pixelPos;
in vec4 vViewPosition;
in vec4 vWorldPosition;

uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;

in vec2 texCoord0;
in vec2 texCoord1;

flat in int textureArrayIndex;
flat in int textureArrayPage;

#include deferred.inl

void main()
{	
	vec4 baseTexel = texture(baseTex[textureArrayPage], vec3(texCoord0, textureArrayIndex), -1.0);
	vec4 glowTexel = texture(glowTex, vec2(texCoord0));

	// and actually we just pack things in here.	

	if (baseTexel.w < 0.2) { discard; } 

	WriteOutPositionAndNormals();

	vec4 lightCoords = lightMatrix * vWorldPosition;
	vec3 r = reflect(-lightVec, normalize(eyeNormal));
	float phong = 0.0; // pow(saturate(r.z), 16.0) * 1.0;		
	float lambertian = dot(eyeNormal,lightVec);
	float shadow = saturate(PCFShadowMap(lightCoords)) * step(0.02,lambertian);

	gl_FragData[1] = baseTexel * 
		saturate(saturate(dot(eyeNormal, lightVec)) 
		 * shadow * lightColor
		 + lightAmbient);

	gl_FragData[1].xyz += vec3(phong,phong,phong)*saturate(shadow+0.5);	
	gl_FragData[1].w = outlineValue;	
	
	gl_FragData[2].xyz = vec3(0.0, 0.0, 0.0);	
	gl_FragData[2].w = 1.0;	
}
