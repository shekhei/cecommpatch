[Vertex shader]
#version 150

out vec4 outPos;
out vec2 texCoord0;
out vec2 texCoord1;

in ivec2 textureArray;
flat out int textureArrayIndex;
flat out int textureArrayPage;

in mat4 worldMatrix;
//uniform mat4 worldMatrix;

uniform mat4 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;

void main()
{
	outPos = projectionMatrix * modelViewMatrix * (worldMatrix * gl_Vertex);
	gl_Position = outPos;

	
	texCoord0 = gl_MultiTexCoord0.xy;
	texCoord1 = gl_MultiTexCoord1.xy;
	textureArrayPage = textureArray.x;
	textureArrayIndex = textureArray.y;
}

[Fragment shader]
#version 150

#extension GL_ARB_draw_buffers : enable
#extension GL_EXT_texture_array : enable

in vec4 outPos;
#include shadow_frag.inl

uniform sampler2DArray baseTex[8];

uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

varying vec3 eyeNormal;
varying vec4 pixelPos;
varying vec4 vWorldPosition;

uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;

in vec2 texCoord0;
in vec2 texCoord1;

flat in int textureArrayIndex;
flat in int textureArrayPage;

void main()
{	
	vec4 baseTexel = texture(baseTex[textureArrayPage], vec3(texCoord0, textureArrayIndex), -1.0);
   if (baseTexel.w < 0.1) { discard; } 
   

   float z = (outPos.z) / outPos.w;
   float depth = z * 0.5 + 0.5;
    
   float dx = dFdx(depth);
   float dy = dFdy(depth);
   float bias = 0.25 * (dx*dx+dy*dy);

      vec4 lightColor = vec4(depth, depth, depth, depth);

   
   gl_FragData[0] = lightColor;
   gl_FragData[1] = lightColor;
   gl_FragData[2] = lightColor;

}
