[Vertex shader]
#version 150

#include layout.inl

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;


uniform mat4 bones[48];
out vec4 outPos;

void main()
{
	vec4 newVertex;
	vec4 oldVertex = vec4(position.xyz, 1);
   
    int index =  int(blendIndices.x);
    newVertex = (bones[index] * oldVertex) *  blendWeights.x;
      
    index= int(blendIndices.y);       
    newVertex = (bones[index] * oldVertex) * blendWeights.y + newVertex;

    index= int(blendIndices.z);       
    newVertex = (bones[index] * oldVertex) *  blendWeights.z  + newVertex;

    index= int(blendIndices.w);       
    newVertex = (bones[index] * oldVertex) *  blendWeights.w   + newVertex;
	gl_Position = projectionMatrix * modelViewMatrix * newVertex;
	outPos = gl_Position;
}



[Fragment shader]
#version 150

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform vec3 lightPos;
uniform vec3 camPos;
uniform sampler2D baseTex;

uniform float ambient;
uniform sampler2D influenceTex;

in vec4 outPos;

out vec4 fragColor;

void main()
{	
   float z = (outPos.z) / outPos.w;
   float depth = z * 0.5 + 0.5;
    
   float dx = dFdx(depth);
   float dy = dFdy(depth);
   float bias = 0.25 * (dx*dx+dy*dy);   
   
   
   vec4 lightColor = vec4(depth, depth, depth, depth);
   
   fragColor = lightColor;
}
