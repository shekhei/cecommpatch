[Vertex shader]

#version 150
#include layout.inl

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;

void main()
{
	vWorldPosition = (modelViewMatrix * vec4(position.xyz, 1));
	gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1);	
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = mat3(modelViewMatrix) * vec3(0,1,0);
}

[Fragment shader]
#version 150
#extension GL_ARB_draw_buffers : enable

#include shadow_frag.inl

uniform sampler2D baseTex;
uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;
uniform vec4 uniformColor;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec4 pixelPos;
uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;

#include deferred.inl

void main()
{	
	WriteOutPositionAndNormals();

	albedoBuffer = vec4(uniformColor.x, uniformColor.y, uniformColor.z, 1.0);
	albedoBuffer.w = outlineValue;
	glowBuffer.xyz = uniformColor.xyz * 0.25;
	glowBuffer.w = 1.0;
}
