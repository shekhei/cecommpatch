[Vertex shader]

#include triplanar_vs.inl

[Fragment shader]
#version 150

#extension GL_ARB_draw_buffers : enable
#extension GL_EXT_texture_array : enable

uniform sampler2DArray baseTex;
uniform sampler2D sideTex;
uniform sampler2D alphaTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec3 norm;
in vec3 eyeNormal;
uniform vec3 lightVec;

in vec4 pixelPos;
in vec4 vWorldPosition;
in vec4 vAdjustedPosition;
in vec4 vLocalPosition;

uniform float specPower;
uniform float specIntensity;

#include shadow_frag_terrain.inl
#include deferred.inl

vec3 rgb_to_hsv_no_clip(vec3 RGB)
{
    vec3 HSV;
    
	float minChannel;
	float maxChannel;
	if (RGB.x > RGB.y) {
		maxChannel = RGB.x;
		minChannel = RGB.y;
	}
	else {
		maxChannel = RGB.y;
		minChannel = RGB.x;
	}

	if (RGB.z > maxChannel) maxChannel = RGB.z;
	if (RGB.z < minChannel) minChannel = RGB.z;

	HSV.xy = vec2(0.0, 0.0);
	HSV.z = maxChannel;
	float delta = maxChannel - minChannel;             //Delta RGB value 
	if (delta > 0.00001) {                    // If gray, leave H & S at zero
		HSV.y = delta / HSV.z;
		vec3 delRGB;
		delRGB = (HSV.zzz - RGB + 3.0*delta) / (6.0*delta);
		if      ( RGB.x == HSV.z ) HSV.x = delRGB.z - delRGB.y;
		else if ( RGB.y == HSV.z ) HSV.x = ( 1.0/3.0) + delRGB.x - delRGB.z;
		else if ( RGB.z == HSV.z ) HSV.x = ( 2.0/3.0) + delRGB.y - delRGB.x;
	}
	return HSV;
}

vec3 hsv_to_rgb(vec3 HSV)
{
	vec3 RGB = HSV.zzz;
	float var_h = HSV.x * 6;
	float var_i = floor(var_h);   // Or ... var_i = floor( var_h )
	float var_1 = HSV.z * (1.0 - HSV.y);
	float var_2 = HSV.z * (1.0 - HSV.y * (var_h-var_i));
	float var_3 = HSV.z * (1.0 - HSV.y * (1-(var_h-var_i)));
	if      (var_i == 0) { RGB = vec3(HSV.z, var_3, var_1); }
	else if (var_i == 1) { RGB = vec3(var_2, HSV.z, var_1); }
	else if (var_i == 2) { RGB = vec3(var_1, HSV.z, var_3); }
	else if (var_i == 3) { RGB = vec3(var_1, var_2, HSV.z); }
	else if (var_i == 4) { RGB = vec3(var_3, var_1, HSV.z); }
	else                 { RGB = vec3(HSV.z, var_1, var_2); }
	return (RGB);
}

vec4 piecewiseBlend(vec4 upperTex, vec4 lowerTex, float amount)
{
	const float blendRange = 0.1;
	vec4 baseTexel;
	
	amount *= 1.0 + blendRange;
	
	if (upperTex.a < amount - blendRange) 
	{
		baseTexel = upperTex;
	} 
	else if (upperTex.a > amount + blendRange) 
	{
		baseTexel = lowerTex;
	} 
	else 
	{
		float f = (upperTex.a - (amount - blendRange)) / (2.0 * blendRange);
		baseTexel = lerp(upperTex, lowerTex, f);	
	}	
	
	return baseTexel;
}

void main()
{	
	WriteOutPositionAndNormals();
	vec3 normal = normalize(norm);
   
	float tighten = 0.4679; 
	
	vec3 blendweights = abs(normal) - tighten;
	blendweights = max(blendweights, 0);
   
	float mXY = blendweights.z;
	float mXZ = blendweights.y; 
	float mYZ = blendweights.x; 
   
	float total = 1.0 / (mXY + mXZ + mYZ);
	mXZ *= total;
	
	float sideTotal = 1.0 / max((mXY + mYZ), 0.0001);
	mXY *= sideTotal;
	mYZ *= sideTotal;
   
   // need scale to be such that 8 units over is one texture

	float scale = 0.038;
	
	float rVal = sqrt(2.0)/2.0;
	vec2 rotatedCoords = vec2(rVal * (vAdjustedPosition.x  - vAdjustedPosition.z), rVal * (vAdjustedPosition.x + vAdjustedPosition.z));
	
	vec4 cXZ = texture(baseTex, vec3(vAdjustedPosition.x * scale, vAdjustedPosition.z * scale, 0.0));   
	vec4 cXY = texture(baseTex, vec3(vAdjustedPosition.x * scale * 0.85, vAdjustedPosition.y * scale * 0.85, 1.0));
	vec4 cYZ = texture(baseTex, vec3(vAdjustedPosition.z * scale * 0.85, vAdjustedPosition.y * scale * 0.85, 1.0));

	vec4 cXZ1 = texture(baseTex, vec3(vAdjustedPosition.x * scale, vAdjustedPosition.z * scale, 2.0));
	vec4 cXY1 = texture(baseTex, vec3(vAdjustedPosition.x * scale * 0.85, vAdjustedPosition.y * scale * 0.85, 3.0));
	vec4 cYZ1 = texture(baseTex, vec3(vAdjustedPosition.z * scale * 0.85, vAdjustedPosition.y * scale * 0.85, 3.0));

	vec4 blendTexel = texture(alphaTex, vec2(gl_TexCoord[1]));	
	
	cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel.g);
	cXY = piecewiseBlend(cXY1, cXY, blendTexel.g);
	cYZ = piecewiseBlend(cYZ1, cYZ, blendTexel.g);

	float noise = texture(baseTex, vec3(vAdjustedPosition.x * scale * 0.2, vAdjustedPosition.z * scale * 0.2, 6.0)).x;

	cXZ1 = 0.6 * texture(baseTex, vec3(vAdjustedPosition.x * scale, vAdjustedPosition.z * scale, 4.0)) + 0.4 * texture(baseTex, vec3(rotatedCoords.x * scale * 0.25, rotatedCoords.y * scale * 0.25, 4.0));
	vec3 cXZHSV = rgb_to_hsv_no_clip(cXZ1.xyz);
	cXZHSV.x += 0.025 - noise * 0.15;
	cXZHSV.y += noise * 0.2 - 0.1;
	cXZHSV.z -= 0.05 - noise * 0.1;
	cXZ1.xyz = hsv_to_rgb(cXZHSV);
	
	cXZ = piecewiseBlend(cXZ1, cXZ, blendTexel.b);

	//vec4 baseTexel = cXY * mXY + cXZ * mXZ + cYZ * mYZ;
	vec4 baseTexel = piecewiseBlend(cXZ, cXY * mXY + cYZ * mYZ, mXZ);
	
	// smoothen the result a bit, to avoid aliasing at shadow contact point
	// FIXME: Divide by W?

	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);	
	
	float light = saturate(saturate(PCFShadowMap(lightCoords)+0.5) * saturate(dot(eyeNormal, lightVec)) + 0.5);
	
	gl_FragData[1] = baseTexel; // * light;
	gl_FragData[1].w = 0.0;

	gl_FragData[2].xyzw = vec4(0.0, 0.0, 0.0, 1.0);
	specInteriorBuffer = vec4(0.0, 0.0, 0.0, 1.0);
	// I don't remember what goes into the other things.		

}
