[Vertex shader]
#version 150
#extension GL_ARB_explicit_attrib_location : require

layout (location=0) in vec4 position;
layout (location=1) in vec4 colors;
layout (location=2) in vec4 texcoords;
out vec2 texCoord0;
out vec4 lightPos;
out vec4 lightColor;
void main()
{
	gl_Position = vec4(position.xyz,1);
	texCoord0 = vec2(position.x,position.y)*0.5+0.5;
	lightPos = vec4(texcoords);
	lightColor = colors;
}

[Fragment shader]

#version 150
#extension GL_ARB_explicit_attrib_location: require

layout (location = 0) out vec4 finalColor;

uniform sampler2D depthTex;
uniform sampler2D normalsTex;
uniform float screenWidth;
uniform float screenHeight;
uniform mat4 projectionMatrixInverse;

in vec2 texCoord0;
in vec4 lightColor;
in vec4 lightPos;

void main()
{
	vec4 pixelPos = texture(depthTex,texCoord0);
	vec4 normalsD = texture(normalsTex,texCoord0);
	pixelPos.b = pixelPos.r;
	pixelPos.r = gl_FragCoord.x / screenWidth;
	pixelPos.g = gl_FragCoord.y / screenHeight;
	pixelPos *= 2.0;
	pixelPos -= 1.0;
	pixelPos.w = 1.0;

	vec4 viewSpacePos = projectionMatrixInverse * pixelPos;
	viewSpacePos.xyz /= viewSpacePos.w;
	viewSpacePos.w = 1.0;

	vec3 distance = lightPos.xyz - viewSpacePos.xyz;
	float len = length(distance) / lightColor.w;
	float atten = clamp(1.0 - (len),0.0,1.0);
	vec3 norm = normalize(distance);
	float dot = clamp(dot(norm,normalsD.xyz),0.0,1.0);
	atten = atten * dot;

	finalColor.xyz = lightColor.xyz*atten;	
	finalColor.w = 1.0;
}
