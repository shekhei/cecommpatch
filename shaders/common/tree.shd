[Vertex shader]

#version 150
#extension GL_ARB_explicit_attrib_location : require

layout ( location = 1 ) in vec3 position;
layout ( location = 2 ) in vec2 texCoord;
layout ( location = 3 ) in vec3 normal;
layout ( location = 5 ) in vec4 blendIndices;
layout ( location = 6 ) in vec4 blendWeights;

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;
out vec2 texCoord0;

uniform mat4 worldMatrix;
uniform mat4 normalMatrix;
uniform float timer;

uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;

void main()
{
	vec4 vertex = vec4(position.xyz, 1);
	vertex.x += sin(timer)*0.05 * pow(max(vertex.y,0.0) / 8.0, 2.0);
	vertex.z += cos(timer*0.8)*0.04 * pow(max(vertex.y,0.0) / 8.0, 2.0);
	vWorldPosition = (modelViewMatrix * vertex);
	gl_Position = projectionMatrix * modelViewMatrix * vertex;
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = mat3(modelViewMatrix) * normal;
	
	texCoord0 = texCoord;
	
}

[Fragment shader]
#version 150

#extension GL_ARB_draw_buffers : enable

#include shadow_frag.inl

in vec2 texCoord0;
uniform sampler2D baseTex;
uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec4 pixelPos;

uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;

#include deferred.inl

void main()
{	
	vec4 baseTexel = texture(baseTex, texCoord0);

	vec4 glowTexel = texture(glowTex, texCoord0);
	// and actually we just pack things in here.	

	if (baseTexel.w < 0.2) { discard; } 

	WriteOutPositionAndNormals();
	
	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);
	vec3 r = reflect(-lightVec, normalize(eyeNormal));

	float phong = pow(saturate(r.z), specularPower) * glowTexel.a * specularIntensity;

	float lambertian = dot(eyeNormal,lightVec);
	float shadow = saturate(PCFShadowMap_Tree(lightCoords)) * step(0.02,lambertian);
	normalBuffer.w = shadow;
	
	// baseTexel * 
	albedoBuffer = baseTexel; 
	albedoBuffer.xyz = blendColorDodge(albedoBuffer.xyz, tintValue.xyz, tintValue.w);
	
	/*
	 * 
	saturate(
	saturate(dot(eyeNormal, lightVec)) 
	* shadow * lightColor
	 + lightAmbient);
	 */

	albedoBuffer.w = outlineValue;
	
	glowBuffer.xyz = vec3(0.0, 0.0, 0.0);	
	
	glowBuffer.w = 1.0;	

}
