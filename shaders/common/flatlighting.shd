[Vertex shader]
#version 150

#include layout.inl
uniform vec3 extentVector;

out vec4 pixelPos;
out vec3 eyeNormal;
out vec4 vWorldPosition;
out vec2 texCoord0;


void main()
{
	vWorldPosition = (modelViewMatrix * vec4(position.xyz, 1));
	gl_Position = projectionMatrix * modelViewMatrix * vec4(position.xyz, 1);
	pixelPos = gl_Position;

	// Lighting vectors
	
	eyeNormal = (cameraNormalMatrix * vec4(extentVector,1)).xyz;
	
	texCoord0 = texCoord;	
}

[Fragment shader]

#version 150
#extension GL_ARB_draw_buffers : enable

#include shadow_frag.inl

uniform sampler2D baseTex;
uniform sampler2D specularTex;
uniform sampler2D glowTex;
uniform mat4 lightMatrix;
uniform mat4 invCameraMatrix;
uniform mat4 worldMatrix;
uniform mat4 normalMatrix;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

uniform float ambient;

in vec4 pixelPos;
uniform float specularPower;
uniform float specularIntensity;

uniform vec3 lightVec;
uniform vec4 lightColor;
uniform vec4 lightAmbient;

in vec2 texCoord0;

#include deferred.inl

void main()
{	

	vec4 baseTexel = texture(baseTex, texCoord0);
	vec4 glowTexel = texture(glowTex, texCoord0);

	// and actually we just pack things in here.	

	if (baseTexel.w < 0.2) { discard; } 

	WriteOutPositionAndNormals();
	vec4 lightCoords = lightMatrix * (invCameraMatrix * vWorldPosition);
	vec3 r = reflect(-lightVec, normalize(eyeNormal));

	float phong = pow(saturate(r.z), specularPower) * glowTexel.a * specularIntensity;


	
	float shadow = saturate(PCFShadowMap_Tree(lightCoords));

	albedoBuffer = baseTexel;
	/*
		albedoBuffer.xyz *=  
		saturate(
		saturate(dot(eyeNormal, lightVec))
		 * shadow * lightColor + lightAmbient).xyz;
		 albedoBuffer.xyz += vec3(phong,phong,phong);	
	 */

	albedoBuffer.w = outlineValue;
	glowBuffer.xyz = vec3(0.0, 0.0, 0.0);	
	glowBuffer.w = 1.0;	
}

