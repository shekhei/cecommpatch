[Vertex shader]
#version 150

varying vec4 pixelPos;
varying vec3 v_norm;
varying vec3 v_tangent;
varying vec3 v_bitangent;

// uniform mat4 worldMatrix;

void main()
{
	gl_Position = gl_ModelViewProjectionMatrix * gl_Vertex;
	pixelPos = gl_Position;

	// Lighting vectors
	
	v_norm = mat3(RENDGL_MODELVIEWMatrix) * gl_Normal;
	v_tangent = mat3(RENDGL_MODELVIEWMatrix) * gl_MultiTexCoord2.xyz;
	v_bitangent = mat3(RENDGL_MODELVIEWMatrix) * gl_MultiTexCoord3.xyz;
	gl_TexCoord[0] = gl_MultiTexCoord0;
	gl_TexCoord[1] = gl_MultiTexCoord1;

}

[Fragment shader]
#version 150

#extension GL_ARB_draw_buffers : enable

uniform sampler2D baseTex;
uniform sampler2D bumpTex;

#define saturate(x) clamp(x,0.0,1.0)
#define lerp mix

varying vec3 v_norm;
varying vec3 v_tangent;
varying vec3 v_bitangent;
varying vec4 pixelPos;

uniform float specPower;
uniform float specIntensity;

void main()
{	
   vec4 baseTexel = texture(baseTex, vec2(gl_TexCoord[0]));
   
   vec3 bumpTexel = texture(bumpTex, vec2(gl_TexCoord[0])).xyz;
   bumpTexel *= 2.0;
   bumpTexel -= 1.0;

   vec3 norm = normalize(v_norm);
   vec3 tangent = normalize(v_tangent);
   vec3 bitangent = normalize(v_bitangent);

// convert bump texel from tangent space into world space:
//
// tx bx nx   bumpx
// ty by ny   bumpy
// tz bz nz   bumpz

   // do lighting
  
   // lightPos is in camera space
   // camPos is in object space
   
	vec4 trueNorm;
	trueNorm.x = dot(bumpTexel, vec3(tangent.x,bitangent.x,norm.x));
	trueNorm.y = dot(bumpTexel, vec3(tangent.y,bitangent.y,norm.y));
	trueNorm.z = dot(bumpTexel, vec3(tangent.z,bitangent.z,norm.z));

	trueNorm.w = pixelPos.z / pixelPos.w;			// NDC cube from -1 ... 1
	trueNorm = trueNorm * 0.5 + 0.5;
   
	gl_FragData[0] = baseTexel;
	gl_FragData[0] = vec4(trueNorm.x,trueNorm.y,trueNorm.z,trueNorm.w);
	gl_FragData[1] = vec4(specPower, specIntensity, 0, 0);

}
